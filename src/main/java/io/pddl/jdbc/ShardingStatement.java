/**
 * Copyright 1999-2015 dangdang.com.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * </p>
 */

package io.pddl.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.common.base.Charsets;
import com.google.common.hash.HashCode;
import com.google.common.hash.Hashing;

import io.pddl.executor.ExecuteUnit;
import io.pddl.executor.ExecuteProcessor;
import io.pddl.executor.InputWrapper;
import io.pddl.jdbc.adapter.AbstractStatementAdapter;
import io.pddl.merger.MergeUtils;
import io.pddl.router.SQLRouter;
import io.pddl.router.support.SQLExecutionUnit;

public class ShardingStatement extends AbstractStatementAdapter {
    
    protected ShardingConnection shardingConnection;
    
    private int resultSetType;
    
    private int resultSetConcurrency;
    
    private int resultSetHoldability;
    
    protected ExecuteProcessor processor;
    
    protected SQLRouter sqlRouter;
    
    private Map<HashCode, Statement> cachedRoutedStatements = new HashMap<>();
    
    protected ResultSet currentResultSet;
    
    public ShardingStatement(final ShardingConnection shardingConnection) {
        this(shardingConnection, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }
    
    public ShardingStatement(final ShardingConnection shardingConnection, final int resultSetType, final int resultSetConcurrency) {
        this(shardingConnection, resultSetType, resultSetConcurrency, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }
    
    public ShardingStatement(final ShardingConnection shardingConnection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {
        this.shardingConnection = shardingConnection;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
        this.sqlRouter= shardingConnection.getSqlRouter();
        this.processor= shardingConnection.getProcessor();
    }
    
    @Override
    public Connection getConnection() throws SQLException {
        return shardingConnection;
    }
    
    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        if (null != currentResultSet && !currentResultSet.isClosed()) {
            currentResultSet.close();
        }
        
        List<ResultSet> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,ResultSet>(){
			@Override
			public ResultSet execute(String shardingSql,Statement input) throws Exception {
				return input.executeQuery(shardingSql);
			}
    	});
        return currentResultSet= MergeUtils.mergeResultSet(result);
    }
    
    @Override
    public int executeUpdate(final String sql) throws SQLException {
    	List<Integer> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Integer>(){
			@Override
			public Integer execute(String shardingSql,Statement input) throws Exception {
				return input.executeUpdate(shardingSql);
			}
    	});
    	return MergeUtils.mergeIntegerResult(result);
    }
    
    @Override
    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
    	List<Integer> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Integer>(){
			@Override
			public Integer execute(String shardingSql,Statement input) throws Exception {
				return input.executeUpdate(shardingSql,autoGeneratedKeys);
			}
    	});
    	return MergeUtils.mergeIntegerResult(result);
    }
    
    @Override
    public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
    	List<Integer> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Integer>(){
			@Override
			public Integer execute(String shardingSql,Statement input) throws Exception {
				return input.executeUpdate(shardingSql,columnIndexes);
			}
    	});
    	return MergeUtils.mergeIntegerResult(result);
    }
    
    @Override
    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
    	List<Integer> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Integer>(){
			@Override
			public Integer execute(String shardingSql,Statement input) throws Exception {
				return input.executeUpdate(shardingSql,columnNames);
			}
    	});
    	return MergeUtils.mergeIntegerResult(result);
    }
    
    @Override
    public boolean execute(final String sql) throws SQLException {
    	List<Boolean> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Boolean>(){
			@Override
			public Boolean execute(String shardingSql,Statement input) throws Exception {
				return input.execute(shardingSql);
			}
    	});
    	return result.get(0);
    }
    
    @Override
    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
    	List<Boolean> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Boolean>(){
			@Override
			public Boolean execute(String shardingSql,Statement input) throws Exception {
				return input.execute(shardingSql,autoGeneratedKeys);
			}
    	});
    	return result.get(0);
    }
    
    @Override
    public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
    	List<Boolean> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Boolean>(){
			@Override
			public Boolean execute(String shardingSql,Statement input) throws Exception {
				return input.execute(shardingSql,columnIndexes);
			}
    	});
    	return result.get(0);
    }
    
    @Override
    public boolean execute(final String sql, final String[] columnNames) throws SQLException {
    	List<Boolean> result= processor.execute(shardingConnection.getExecuteContext(),generateStatements(sql), new ExecuteUnit<Statement,Boolean>(){
			@Override
			public Boolean execute(String shardingSql,Statement input) throws Exception {
				return input.execute(shardingSql,columnNames);
			}
    	});
    	return result.get(0);
    }
    
    private List<InputWrapper<Statement>> generateStatements(final String sql) throws SQLException {
    	List<SQLExecutionUnit> executionUnits = sqlRouter.doRoute(shardingConnection.getExecuteContext(),sql, Collections.emptyList());
        List<InputWrapper<Statement>> result= new ArrayList<InputWrapper<Statement>>(executionUnits.size());
    	for (SQLExecutionUnit it : executionUnits) {
        	Statement statement= generateStatement(it.getShardingSql(),it.getDataSourceName());
        	result.add(new InputWrapper<Statement>(it,statement));
        }
        return result;
    }
    
    private Statement generateStatement(final String sql, final String dataSourceName) throws SQLException {
        HashCode hashCode =  Hashing.md5().newHasher().putString(sql, Charsets.UTF_8).putString(dataSourceName, Charsets.UTF_8).hash();
        if (cachedRoutedStatements.containsKey(hashCode)) {
            return cachedRoutedStatements.get(hashCode);
        }
        Connection connection = shardingConnection.getConnection(dataSourceName);
        Statement result;
        if (0 == resultSetHoldability) {
            result = connection.createStatement(resultSetType, resultSetConcurrency);
        } else {
            result = connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        }
        cachedRoutedStatements.put(hashCode, result);
        return result;
    }
    
    @Override
    public ResultSet getResultSet() throws SQLException {
        if (null != currentResultSet) {
            return currentResultSet;
        }
        List<ResultSet> resultSets = new ArrayList<>(getRoutedStatements().size());
        for (Statement each : getRoutedStatements()) {
            resultSets.add(each.getResultSet());
        }
        return currentResultSet = MergeUtils.mergeResultSet(resultSets);
    }
    
    @Override
    public Collection<? extends Statement> getRoutedStatements() throws SQLException {
        return cachedRoutedStatements.values();
    }
    
    @Override
    public void clearRoutedStatements() throws SQLException {
        cachedRoutedStatements.clear();
    }

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return resultSetConcurrency;
	}

	@Override
	public int getResultSetType() throws SQLException {
		return resultSetType;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return resultSetHoldability;
	}
}
